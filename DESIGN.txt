1.

src
    entities
        data
            Node
            Session
        interface
            Node
            Session
        userInterface
            Node
            Session
    interfaces
        sessionManager XXX
    tech
        fileSystem
        nestedObj XXX object-path(npm) OOO
    resource
        appSession
        DB
        DOM
        DOMRefs
    App



2.

src
    entities
        static
            NodeData
                id: uuid
                key: String
                value: String?
                parent: Node
                relations: Array: {tie: String, node: Node}
            SessionData
                name
                root: Node
                seed: Node
                lastCopiedNode: Node
        visual
            Node
                DOM
                depth: Int
                selected: Bool
                grown: Bool
                filter: String
                render()
                grow()
                shrink()
                plant()
                
            Session
        final
            Node
            
                mirrorLink()
                isLink()
                getPath()
                getPathString()

                
                /*이건 그냥 UserAction에 떠넘기는게 맞는것같다.
                Node 객체는 이 정도 추상적인 인터페이스까진 제공 안해도 될것 같다.
                
                이건 UI 만들면서 하나씩 추가해도 된다.
                moveUp()
                moveDown()
                depthUp()
                depthDown()
                copy()
                paste()
                toggleGrow()
                setFilter()
                setKey()
                setValue()
                addTie()
                deleteTie()
                
                */
            Session
                
    interfaces
        sessionManager XXX
    tech
        fileSystem
        nestedObj XXX object-path(npm) OOO
    resource
        appSession
        DB
        DOM
        DOMRefs
    App



3.
src
    entity
        static
            NodeData
                id: uuid
                key: String
                value: String?
                parent: Node
                relations: Array: {tie: String, node: Node}
            SessionData
                name
                root: Node
                seed: Node
                copiedNode: Node
        visual
            Node
                DOM
                depth: Int
                selected: Bool
                grown: Bool
                filter: String
                render()
                grow()
                shrink()
        auto
            Node
                constructor(nodeData, nodeVisual)
                mirrorLink()
                isLink()
                getPath()
                getPathString()
            Session
    tech
        fileSystem
        nestedObj XXX  object-path(npm) OOO
    resource
        appSession: SessionData
        DB
        DOM
        DOMRefs
    natural
        userActions
        init
    App




...
entity
    data
    logic
    facade

Node
    data
        id
        key
        value
        parent
    logic
        isLink()
        render()
            this.data.key 어쩌구
            
    visual
        if (this.logic.isLink()) this.visual.DOM.querySelector("#key").style.color = "skyblue"

userActions
    db.update(node.data.id, node.data)



4.
src
    entity
        static
            NodeData
                id: uuid
                key: String
                value: String?
                parent: NodeData.id(외래키)
                relations: Array of {tie: String, node: NodeData.id(외래키)}
            SessionData
                name: String
                srcRootData: RootData
                modifiedNodes: Array of NodeData that are changed by NodeView instances
                nodeViews: Array of NodeView
                rootNode: Node
                seedNode: Node
                copiedNode: Node
                adress: Array of path, from rootNode to thisNode
                history: Array of path, every nodes visited in order
            RootData: sql.js DB
                root: NodeData or NodeData.id
                nodes: NodeData
            TreeData: Array of NodeView(serialized)
        model
            NodeModel extends NodeData
                constructor(data, visual)
                mirrorLink()
                isLink()
                getPath()
                getPathString()
        view
            NodeView extends NodeModel
                constructor(data, visual)
                data
                DOM
                selected: Bool
                grown: Bool
                filter: String //filter relations to show by their ties
                render()
                    render its DOM by its key, value, parent, relations, selected, grown, and filter
                grow()
                    this.grown = false
                    this.render()
                shrink()
                    this.grown = true
                    this.render()
                copy()
                paste()
    tech
        fileSystem
        nestedObj XXX  object-path(npm) OOO
    resource
        appSession: SessionData
        browserDB
            initData
                lastRootDB
                lastSeed
                lastTree: TreeData
        DOM
        DOMRefs
    natural
        userActions
            saveChanges()
                appSession.editor.modifiedNodes foreach {
                    appSession.srcRootData 에 저장
                    fileSystem 활용하여 유저의 스토리지에 영구 저장
                }
        init
    App


할일
1. sql.js 이용해보기
2. nestedObj 퇴역
3. 모듈 재정의


sql.js 안되면 브라우저 업데이트 해볼것