
그냥 텍스트 에디터만 주면 되겠는데. yaml 편집하게.
파싱해서 일부분만 떼서 보게 하는 기능만 있으면 되잖아. 그럼 편하잖아.
파싱해서 미러링크 달고.
Blocks를 쓰는 화려한 에디터는 나중으로 미루자.
다만 채널링과 링크 접속 안되는건 아쉽긴 하지.

src:
  libs:
    nestedObj
    pureFilename
    yamlTools

  components:
    Contexted
    Block
    Head
    Body
    AutoComplete
    ResizedTextarea
    ResizedInput

  actions: #libs specifically made for this app, Root.
    parseQuery(str, docs)
    createMirroredLink(from:str, to:str, tie:id, docs, ties)
  
# Editor (pot)
#   Block:
#     order:
#     depth: van.state()
#     key: van.state()
#     value: van.state()
#     global 
#   Head
#   Body
#   Blocks_: elem under Editor
#   blocksData: list of {depth, key, value}. When moveUp / moveDown, the order of the items gets swapped.
#   blockActions: shown in context menu
#     editTree: when executed, changes corresponding blocksData everytime.
#       blocksData.get(Block_).*prop such depth/order/key/value* = *value*
#       moveUp: alt + w
#       moveDown: alt + s
#       depthUp: alt + d
#       depthDown: alt + a
#       join (= embed): the block's value gets emptied.
#       fold: the block's value is rebuilt by parsing children blockData, then reassigned.
#       open: 
#       delete:
#     focusUp:
#     focusDown:
#     focusDepthUp:
#     focusDepthDown:
#     copyData:
#     pasteData:
#   visitHistory: list of the names of visited thots
#   visitHistoryActions: same as the typical web browsers
#     goBack: alt + ArrowLeft
#     goForward: alt + ArrowRight
#     goUp: alt + ArrowUp
#     goDown: alt + ArrowDown
#   editHistory
#   editHistoryActions
#     goBack: alt + z
#     goForward: alt + shift + Z
#   channel: function
#   currentChannel: key(tie\relation) name
#   stringify: | 
#     blocks to yaml.
#     let newRaw = []
#     for (let {depth, key, value} of blocksData) {
#       let line = (depth 갯수만큼의 indent) + yaml.parse({key: value})
#       newRaw.push(line)
#     }

#   save

RawEditor:
  parse: parse text as obj
  stringify
  mirror
  save
  channel
  currentChannel
  


global:
  DB: new Dexie("RootDB")
    roots:
  root:
    handle: filehandle (folder handle)
    about (metadata): "_about.yaml" file parsed
  tree:
    raw
    editedRaw
    parsed: vanX.reactive()
      when global.tree.parsed is updated in any window, other windows are updated in sync.
    name
  actions:
    openRoot: 
      set global.root props after showDirectoryPicker()
      open global.root.about.enterance
    openTree:
  settings:
    yamlParseRules:
      indicators:
        raw:
          body: //
          non-mirrored link: @!link
        media:
          body: 
          link: @link
          named link: @[name|link]
        query:
          divider: "/"
      "Parse key as link": true
    rootmarkParseRules:
      depth: "#"
      link: @link
      named link: @[name|link]
    shortcuts:
      blockActions
      open root
      open tree
      search
      view editor
      view raw editor
      view logs
  App (DOM)

App
  RootIO
  Search (also shows tree name)
  Editor
  RawEditor
  LogsPreview
  LogsView
  ContextMenu