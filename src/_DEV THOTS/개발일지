리팩토링 2024.04.15

이제부터:
모든 DOM은 init.js의 export default function init이 실행됨으로써 global의 각 구석에 저장된다.
즉 모든 DOM은 global에 저장된다.
App.js는 global에서 각 DOM 파트들을 가져와 자기 DOM 안에 넣는다.
App.js는 자신의 DOM을 export한다.
그럼 main.js에서 App.js의 DOM을 브라우저에 출력한다.

Editor, ContextMenu 등은 이제 동명의 js파일로 분리되어 단순 유틸 모듈이 되었다.
정확히는 
1. 모듈로 읽어오고 수정하는 global 객체 안에 들어있는 DOM을 수정
2. 그 DOM과 연관된 기능을 수행
하는 유틸이다.

유틸 모듈과 DOM의 관계는 정확히 뭐라고 기술할 수 있을까?
Editor라는 이름은 말 그대로 Edit을 한다는 의미이다.
정확히는 yaml 파일, 즉 document를 수정한다.
유저는 DOM으로 인풋을 넣어 수정하고, 수정의 결과물을 DOM의 아웃풋으로 보고, 다시 DOM으로 인풋해 수정한다.
그 안에서 인풋이 들어왔을 때, 아웃풋을 내기 위해 실행하는 연산을 같은 이름의 유틸 모듈에 넣은 것이다.
그러니 "연산 모듈"이라고 해도 되겠다.



이 리팩토링으로 얻는 이득:
1. global이 모듈로 분리됨에 따라 App.js 안에 들어있던 잡다한 DOM과 기능들이 여러 군데로 쪼개져 한번에 하나씩 보기 편하다. 각 js파일 모듈의 역할 분담이 확실해졌다.
2. App.js, libs, actions, 컴포넌트 모듈 등 모듈이나 폴더들에 잡다하게 섞여 들어가있던 유틸들이, 특정 DOM 노드에 관련된 작업만 실시하는 유틸 모듈들로 쪼개졌다.
따라서 특정 메소드, 함수 등의 위치를 찾기가 편해졌다.
