components
  Contexted
  
Editor (pot)
  Block
    depth: van.state()
    key
    value
    global 
  Head
  Body
  Blocks_: elem
  blockActions: shown in context menu
    moveUp: alt + w
    moveDown: alt + s
    depthUp: alt + d
    depthDown: alt + a
    focusUp:
    focusDown:
    focusDepthUp:
    focusDepthDown:
    join (= embed):
    open:
    delete:
    copyData:
    pasteData:
  visitHistory: list of the names of visited thots
  visitHistoryActions: same as the typical web browsers
    goBack: alt + ArrowLeft
    goForward: alt + ArrowRight
    goUp: alt + ArrowUp
    goDown: alt + ArrowDown
  editHistory
  editHistoryActions
    goBack: alt + z
    goForward: alt + shift + Z
  channel: function
  currentChannel: key(tie\relation) name
  stringify: blocks to yaml.
    for (let c of this.Blocks_.children) 
      let {key, value} = c.data

  save

---
그냥 텍스트 에디터만 주면 되겠는데. yaml 편집하게.
파싱해서 일부분만 떼서 보게 하는 기능만 있으면 되잖아. 그럼 편하잖아.
파싱해서 미러링크 달고.
Blocks를 쓰는 화려한 에디터는 나중으로 미루자.
다만 채널링과 링크 접속 안되는건 아쉽긴 하지.

RawEditor 
  parse
  stringify
  mirror
  save


global
  root
    handle: filehandle (folder handle)
    about (metadata): "_about.yaml" file parsed
  tree
    raw
    editedRaw
    parsed
    name
  actions
    openRoot: 
      set global.root props after showDirectoryPicker()
      open global.root.about.enterance
    openTree
  settings
    yamlParseRules
      indicators
        raw
          body: //
          non-mirrored link: @!link
        media
          body: 
          link: @link
          named link: @[name|link]
        query
          divider: "/"
      "Parse key as link": true
    rootmarkParseRules
      depth: "#"
      link: @link
      named link: @[name|link]
    shortcuts
      
  App

App
  RootIO
  Search (also shows tree name)
  Editor
  RawEditor
  LogsPreview
  LogsView
  ContextMenu